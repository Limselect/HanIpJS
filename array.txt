배열 Array
    순서가 있는 요소들의 집합이다
    
    

    객체와 동일하게 생성자 함수나 리터럴을 사용해 생성된다

        1. 생성자 함수 
            let arr = new Array();
            console.log(arr);   //  출력: [], (객체는 중괄호 배열은 대괄호)

            new Array()를 작성할 때 매개변수로 하나의 값을 입력하면 배열의 크기를, 여러 개의 값을 입력하면 하나의 배열이 생성된다.
        
        2. 배열 리터럴
            let arr1 = [1, 2, 3];
            let arr2 = [3];

            // 리터럴은 값의 개수와 상관없이 모두 배열 값으로 적용된다


            // 배열은 index number로 직접 호출이 가능함
                let array = [1, "hello", null];

            // 배열의 index number는 0부터 시작
                console.log(array[0]);  //  출력: 1
                console.log(array[1]);  //  출력: hello
                console.log(array[2]);  //  출력: null



    배열 요소 추가

        1. push()   배열의 마지막 인덱스에 요소 추가
            let animal = ['tiger', 'lion'];
            animal.push('cat');
            console.log(animal);    //  출력: [tiger, lion, cat]

        2. unshift()    배열의 첫 번째 인덱스에 요소 추가
            animal.unshift('dog');
            console.log(animal);    //  출력:   [dog, tiger, lion];



    배열 요소 수정

        // 변수에 담긴 배열의 값을 초기화하거나 인덱스 넘버를 직접 호출해 수정할 수 있다

        let animal = ["cat", "dog", "hamster"];

        animal = ["cat", "rabbit", "hamster"];  //  배열의 값 초기화
        animal[2] = "parrot";   //  인덱스 넘버 직접 호출해 수정

        console.log(anmial);    //  출력: ["cat", "rabbit", "parrot"]

        // 이때, 변수를 선언할 때 const를 사용해 선언하면 타입오류가 발생하나 인덱스 넘버를 직접 호출해 수정하면 오류가 나지 않는다.



    배열 요소 삭제

        1. pop()    배열 마지막 요소 삭제

        2. shift()  배열 첫 번째 요소 삭제

        3. splice() 배열서 특정 인덱스의 요소 삭제
            이때 매개 변수를 두개의 값을 받아 사용할 수 있는데 삭제를 시작할 인덱스 넘버와, 삭제할 개수를 입력받아 사용할 수 있다.

            let color = ["red", "yellow", "orange", "green", "blue"];

            color.splice(1, 3);

            console.log(color); //  출력: ["red", "blue"] (index number가 1인 "yellow"부터 3개가 삭제됨.)




    배열의 개수를 확인하는 방법은

        //배열이 담긴 변수 뒤에 .length를 붙여 사용할 수있으며
        // 삭제하기 전
        console.log(color.length);  //  출력: 5
        //이러한 특징으로 indexNumber = array.length - 1 이라는 점을 항상 유의해야한다.
